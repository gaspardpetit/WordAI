name: Release WordAI Add-in

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  release:
    runs-on: windows-latest
    env:
      BUILD_CONFIGURATION: Release
    steps:
      - uses: actions/checkout@v4

      - name: Prepare build metadata
        shell: pwsh
        run: |
          $tag = $env:GITHUB_REF_NAME
          if (-not $tag) { throw "GITHUB_REF_NAME is not set." }
          if ($tag.StartsWith("v")) { $tag = $tag.Substring(1) }
          if ($tag -notmatch '^\d+(\.\d+){2,3}$') {
              throw "Tags must follow v<major.minor.patch[.revision]>."
          }
          $segments = $tag.Split(".")
          if ($segments.Count -eq 3) {
              $appVersion = "$tag.0"
          } else {
              $appVersion = $tag
          }
          $publishDir = Join-Path $env:RUNNER_TEMP "publish"
          if (-not (Test-Path $publishDir)) {
              New-Item -ItemType Directory -Path $publishDir | Out-Null
          }
          if (-not $publishDir.EndsWith("\\")) {
              $publishDir += "\\"
          }
          $packageName = "WordAI-$tag.zip"
          $packagePath = Join-Path $env:RUNNER_TEMP $packageName
          "RELEASE_VERSION=$tag" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "APPLICATION_VERSION=$appVersion" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "PUBLISH_DIR=$publishDir" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "RELEASE_PACKAGE=$packagePath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Restore NuGet packages
        run: nuget restore WordAI.VSTO/WordAI.VSTO.csproj -SolutionDirectory .

      - name: Run unit tests
        shell: pwsh
        run: |
          $env:DOTNET_ROLL_FORWARD = 'Major'
          dotnet test WordAI.Tests/WordAI.Tests.csproj

      - name: Import signing certificate
        shell: pwsh
        env:
          PFX_BASE64: ${{ secrets.WORDAI_CODE_SIGNING_PFX }}
          PFX_PASSWORD: ${{ secrets.WORDAI_CODE_SIGNING_PASSWORD }}
        run: |
          if (-not $env:PFX_BASE64) { throw "WORDAI_CODE_SIGNING_PFX is not configured." }
          if (-not $env:PFX_PASSWORD) { throw "WORDAI_CODE_SIGNING_PASSWORD is not configured." }
          $pfxPath = Join-Path $env:RUNNER_TEMP 'wordai-signing.pfx'
          [IO.File]::WriteAllBytes($pfxPath, [Convert]::FromBase64String($env:PFX_BASE64))
          $securePassword = ConvertTo-SecureString -String $env:PFX_PASSWORD -AsPlainText -Force
          $cert = Import-PfxCertificate -FilePath $pfxPath -CertStoreLocation Cert:\CurrentUser\My -Password $securePassword
          if (-not $cert) { throw "Failed to import signing certificate." }
          "CERT_THUMBPRINT=$($cert.Thumbprint)" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Remove-Item $pfxPath -Force

      - name: Publish add-in
        working-directory: WordAI.VSTO
        shell: pwsh
        run: |
          $msbuild = "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\MSBuild\Current\Bin\MSBuild.exe"
          $publishDir = $env:PUBLISH_DIR
          $arguments = @(
              "WordAI.VSTO.csproj",
              "/target:Publish",
              "/p:Configuration=$env:BUILD_CONFIGURATION",
              "/p:TargetFrameworkVersion=v4.8",
              "/p:PublishDir=$publishDir",
              "/p:ApplicationVersion=$env:APPLICATION_VERSION",
              "/p:ApplicationRevision=0",
              "/p:ManifestCertificateThumbprint=$env:CERT_THUMBPRINT",
              "/p:ManifestKeyFile="
          )
          & $msbuild @arguments

      - name: Include public certificate in package
        shell: pwsh
        run: |
          $publishDir = $env:PUBLISH_DIR
          $certSource = Join-Path $env:GITHUB_WORKSPACE 'WordAI-CodeSigning.cer'
          if (-not (Test-Path $certSource)) { throw "WordAI-CodeSigning.cer not found at repository root." }
          Copy-Item -Path $certSource -Destination (Join-Path $publishDir 'WordAI-CodeSigning.cer') -Force

      - name: Create release package
        shell: pwsh
        run: |
          $publishDir = $env:PUBLISH_DIR
          $packagePath = $env:RELEASE_PACKAGE
          if (Test-Path $packagePath) { Remove-Item $packagePath -Force }
          Compress-Archive -Path "$publishDir*" -DestinationPath $packagePath -Force

      - name: Upload installer artifact
        uses: actions/upload-artifact@v4
        with:
          name: WordAI-${{ env.RELEASE_VERSION }}
          path: ${{ env.RELEASE_PACKAGE }}

      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: WordAI ${{ env.RELEASE_VERSION }}
          generate_release_notes: true
          files: ${{ env.RELEASE_PACKAGE }}

      - name: Remove imported certificate
        if: always()
        shell: pwsh
        run: |
          if ($env:CERT_THUMBPRINT) {
              Remove-Item -Path "Cert:\CurrentUser\My\$($env:CERT_THUMBPRINT)" -ErrorAction SilentlyContinue
          }
